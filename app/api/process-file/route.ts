import { type NextRequest, NextResponse } from "next/server"

// üö® C√ìDIGO v14.0 GEMINI - Usando Gemini API para PDFs
console.log("üö® CARGANDO v14.0 GEMINI - PDF con Gemini API")

// Funci√≥n para extraer texto usando Gemini API
async function extractWithGemini(file: File): Promise<string> {
  console.log("ü§ñ === GEMINI API EXTRACCI√ìN ===")

  try {
    // Verificar que tenemos la API key
    if (!process.env.GEMINI_API_KEY) {
      throw new Error("GEMINI_API_KEY no configurado")
    }

    // Convertir archivo a base64 de forma simple y directa
    const arrayBuffer = await file.arrayBuffer()
    const base64 = Buffer.from(arrayBuffer).toString("base64")

    console.log(`üìä Archivo convertido: ${base64.length} caracteres base64`)

    // Determinar el MIME type
    let mimeType = file.type
    if (!mimeType || mimeType === "application/octet-stream") {
      if (file.name.toLowerCase().endsWith(".pdf")) {
        mimeType = "application/pdf"
      }
    }

    console.log(`üìÑ MIME type: ${mimeType}`)

    // Llamar a Gemini API con timeout
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 30000) // 30 segundos

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        signal: controller.signal,
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: "Extrae todo el texto de este documento PDF. Devuelve SOLO el texto extra√≠do, sin comentarios adicionales. Si el documento contiene tablas, mantenlas organizadas. Si hay m√∫ltiples p√°ginas, incluye todo el contenido.",
                },
                {
                  inline_data: {
                    mime_type: mimeType,
                    data: base64,
                  },
                },
              ],
            },
          ],
          generationConfig: {
            temperature: 0.1,
            topK: 1,
            topP: 1,
            maxOutputTokens: 8192,
          },
        }),
      },
    )

    clearTimeout(timeoutId)

    if (!response.ok) {
      const errorText = await response.text()
      console.error("‚ùå Error Gemini API:", response.status, errorText)
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`)
    }

    const data = await response.json()
    console.log("üìÑ Respuesta de Gemini recibida")

    // Extraer el texto de la respuesta
    if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
      const extractedText = data.candidates[0].content.parts[0].text
      console.log(`‚úÖ Texto extra√≠do con Gemini: ${extractedText.length} caracteres`)
      console.log(`üìã Texto: "${extractedText.substring(0, 200)}..."`)
      return extractedText.trim()
    } else {
      console.log("‚ö†Ô∏è No se encontr√≥ texto en la respuesta de Gemini")
      console.log("üìÑ Respuesta completa:", JSON.stringify(data, null, 2))
      return ""
    }
  } catch (error: any) {
    console.error("‚ùå Error Gemini:", error)

    // Detectar errores espec√≠ficos que requieren notificaci√≥n grande
    if (error.name === "AbortError") {
      throw new Error("TIMEOUT_ERROR: El procesamiento tard√≥ demasiado tiempo")
    }

    if (error.message.includes("Maximum call stack size exceeded")) {
      throw new Error("STACK_OVERFLOW_ERROR: El archivo es demasiado complejo para procesar")
    }

    throw new Error(`Gemini API error: ${error.message}`)
  }
}

// Funci√≥n para extraer texto de PDF usando Gemini con mejor manejo de errores
async function extractTextFromPDF(file: File): Promise<string> {
  console.log("üö® === EXTRACTOR PDF v14.0 GEMINI ===")

  try {
    const extractedText = await extractWithGemini(file)

    if (extractedText && extractedText.length > 0) {
      console.log("‚úÖ Extracci√≥n con Gemini exitosa")
      return extractedText
    } else {
      console.log("‚ùå Gemini no pudo extraer texto")
      // En lugar de retornar un string, lanzar error para activar notificaci√≥n
      throw new Error("GEMINI_NO_TEXT: No se pudo extraer texto del PDF")
    }
  } catch (error: any) {
    console.error("‚ùå Error en extractor Gemini:", error)

    if (error.message.includes("GEMINI_API_KEY")) {
      throw new Error("GEMINI_CONFIG_ERROR: Gemini API Key no configurado")
    }

    // Re-lanzar TODOS los errores para que sean manejados en el endpoint principal
    throw error
  }
}

async function processText(file: File): Promise<string> {
  console.log("üìÑ Procesando archivo de texto...")

  try {
    const text = await file.text()

    if (!text || text.trim().length === 0) {
      throw new Error("El archivo de texto est√° vac√≠o.")
    }

    // Solo verificar que no sea binario
    const binaryRegex = /[\x00-\x08\x0E-\x1F\x7F-\xFF]/g
    const binaryMatches = text.match(binaryRegex)

    if (binaryMatches && binaryMatches.length > text.length * 0.5) {
      throw new Error("El archivo no es un archivo de texto v√°lido. Puede estar da√±ado o ser un archivo binario.")
    }

    console.log(`‚úÖ Texto procesado exitosamente: ${text.length} caracteres`)
    return text
  } catch (error: any) {
    console.error("‚ùå Error procesando texto:", error)

    if (error.message.includes("da√±ado") || error.message.includes("texto") || error.message.includes("vac√≠o")) {
      throw error
    }

    throw new Error("No se pudo leer el archivo de texto. Puede estar da√±ado o no ser un archivo de texto v√°lido.")
  }
}

// Placeholder function for DOCX processing.  Replace with actual implementation.
async function processDOCX(file: File): Promise<string> {
  console.log("üìÑ Procesando archivo DOCX (placeholder)...")
  return "DOCX processing not yet implemented."
}

export async function POST(request: NextRequest) {
  console.log("üö® === ENDPOINT v14.0 GEMINI ===")
  console.log("üìÖ", new Date().toISOString())

  try {
    const formData = await request.formData()
    const file = formData.get("file") as File

    if (!file) {
      return NextResponse.json({ error: "No se encontr√≥ archivo" }, { status: 400 })
    }

    console.log(`üìÅ ARCHIVO: ${file.name} (${file.size} bytes)`)

    let extractedText = ""
    let method = ""

    const fileName = file.name.toLowerCase()
    const fileType = file.type.toLowerCase()

    try {
      if (fileName.endsWith(".pdf") || fileType.includes("pdf")) {
        console.log("üîç PDF DETECTADO - USANDO GEMINI API")
        extractedText = await extractTextFromPDF(file)
        method = "gemini-api"
      } else if (fileName.endsWith(".docx") || fileType.includes("wordprocessingml")) {
        extractedText = await processDOCX(file)
        method = "mammoth"
      } else if (fileName.endsWith(".txt") || fileType.includes("text/plain")) {
        extractedText = await processText(file)
        method = "text"
      } else {
        return NextResponse.json({ error: `Tipo no soportado: ${file.type}` }, { status: 400 })
      }
    } catch (processingError: any) {
      // Errores espec√≠ficos de Gemini que requieren notificaci√≥n grande
      if (processingError.message.includes("The document has no pages")) {
        return NextResponse.json(
          {
            error: "El archivo PDF est√° da√±ado o no contiene p√°ginas v√°lidas. No se puede extraer texto.",
            errorTitle: "üìÑ PDF da√±ado o vac√≠o",
            suggestion:
              "‚Ä¢ El PDF puede estar corrupto o da√±ado\n‚Ä¢ Verifica que el archivo se abra correctamente en un visor PDF\n‚Ä¢ Intenta con un PDF diferente\n‚Ä¢ Convierte el documento a texto plano (.txt)\n‚Ä¢ Re-guarda el PDF desde la aplicaci√≥n original",
            fileInfo: {
              name: file.name,
              size: `${(file.size / 1024 / 1024).toFixed(2)}MB`,
              type: file.type || "Desconocido",
            },
            showInUI: true,
          },
          { status: 400 },
        )
      }

      if (processingError.message.includes("GEMINI_NO_TEXT")) {
        return NextResponse.json(
          {
            error: "El PDF no contiene texto extra√≠ble. Puede ser un PDF de solo im√°genes o estar escaneado.",
            errorTitle: "üñºÔ∏è PDF sin texto extra√≠ble",
            suggestion:
              "‚Ä¢ El PDF contiene solo im√°genes escaneadas\n‚Ä¢ Usa un software de OCR para extraer texto\n‚Ä¢ Convierte las im√°genes a texto usando herramientas online\n‚Ä¢ Intenta con un PDF que tenga texto seleccionable",
            fileInfo: {
              name: file.name,
              size: `${(file.size / 1024 / 1024).toFixed(2)}MB`,
              type: file.type || "Desconocido",
            },
            showInUI: true,
          },
          { status: 400 },
        )
      }

      if (processingError.message.includes("GEMINI_CONFIG_ERROR")) {
        return NextResponse.json(
          {
            error: "Gemini API no est√° configurado correctamente. Verifica las variables de entorno.",
            errorTitle: "üîß Error de configuraci√≥n",
            suggestion:
              "‚Ä¢ Verifica que GEMINI_API_KEY est√© configurado\n‚Ä¢ Revisa la gu√≠a de configuraci√≥n\n‚Ä¢ Contacta al administrador del sistema\n‚Ä¢ Intenta con un archivo de texto (.txt) como alternativa",
            fileInfo: {
              name: file.name,
              size: `${(file.size / 1024 / 1024).toFixed(2)}MB`,
              type: file.type || "Desconocido",
            },
            showInUI: true,
          },
          { status: 500 },
        )
      }

      // Errores generales de la API de Gemini
      if (processingError.message.includes("Gemini API error:")) {
        let errorTitle = "ü§ñ Error de Gemini API"
        let errorMessage = "No se pudo procesar el archivo PDF con Gemini API."
        let suggestions =
          "‚Ä¢ El archivo puede estar da√±ado o ser incompatible\n‚Ä¢ Intenta con un PDF m√°s simple\n‚Ä¢ Verifica tu conexi√≥n a internet\n‚Ä¢ Convierte a texto plano (.txt) como alternativa"

        // Detectar errores espec√≠ficos en el mensaje
        if (processingError.message.includes("400")) {
          errorTitle = "üìÑ Archivo no v√°lido"
          errorMessage = "El archivo PDF no es v√°lido o no se puede procesar."
          suggestions =
            "‚Ä¢ Verifica que el archivo no est√© da√±ado\n‚Ä¢ Usa un PDF con texto seleccionable\n‚Ä¢ Re-guarda el PDF desde la aplicaci√≥n original\n‚Ä¢ Convierte a texto plano (.txt)"
        } else if (processingError.message.includes("403")) {
          errorTitle = "üìä L√≠mite de API alcanzado"
          errorMessage = "Se ha alcanzado el l√≠mite de procesamiento de Gemini API."
          suggestions =
            "‚Ä¢ Intenta nuevamente en unos minutos\n‚Ä¢ Verifica las cuotas en el panel de control\n‚Ä¢ Usa un archivo de texto (.txt) como alternativa\n‚Ä¢ Contacta soporte si persiste"
        } else if (processingError.message.includes("413")) {
          errorTitle = "üìè Archivo demasiado grande"
          errorMessage = "El archivo PDF es demasiado grande para procesar."
          suggestions =
            "‚Ä¢ Reduce el tama√±o del archivo PDF\n‚Ä¢ Divide el documento en partes m√°s peque√±as\n‚Ä¢ Usa un archivo de m√°ximo 10MB\n‚Ä¢ Convierte a texto plano (.txt)"
        }

        return NextResponse.json(
          {
            error: errorMessage,
            errorTitle: errorTitle,
            suggestion: suggestions,
            fileInfo: {
              name: file.name,
              size: `${(file.size / 1024 / 1024).toFixed(2)}MB`,
              type: file.type || "Desconocido",
            },
            showInUI: true,
          },
          { status: 400 },
        )
      }

      // Para otros errores, re-lanzar
      throw processingError
    }

    const finalText = extractedText.trim()

    if (!finalText) {
      return NextResponse.json(
        {
          error: "No se pudo extraer texto del archivo",
          details: "El archivo podr√≠a estar vac√≠o o corrupto",
        },
        { status: 400 },
      )
    }

    console.log(`üéâ === RESULTADO FINAL ===`)
    console.log(`üìä Caracteres: ${finalText.length}`)
    console.log(`üîß M√©todo: ${method}`)
    console.log(`üìã Texto: "${finalText.substring(0, 100)}..."`)

    return NextResponse.json({
      success: true,
      text: finalText,
      extractionMethod: method,
      stats: {
        fileName: file.name,
        fileSize: file.size,
        textLength: finalText.length,
      },
    })
  } catch (error: any) {
    console.error("‚ùå ERROR:", error)
    return NextResponse.json(
      {
        error: `Error: ${error.message}`,
        details: "Verifica que GEMINI_API_KEY est√© configurado correctamente",
      },
      { status: 500 },
    )
  }
}

export async function GET() {
  return NextResponse.json({
    status: "ACTIVO",
    version: "v14.0 GEMINI",
    method: "Gemini API para PDFs + Google Cloud Text-to-Speech",
    timestamp: new Date().toISOString(),
    requirements: {
      gemini: process.env.GEMINI_API_KEY ? "‚úÖ Configurado" : "‚ùå Falta GEMINI_API_KEY",
      googleCloud: process.env.GOOGLE_CLOUD_CREDENTIALS ? "‚úÖ Configurado" : "‚ùå Falta GOOGLE_CLOUD_CREDENTIALS",
    },
  })
}

